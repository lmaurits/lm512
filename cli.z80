include 'string.z80'

ParseLine:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; BC is a pointer to the argc/argv array
	;	(it gets pushed and popped around comparisons)
	; DE is used by StrTok
	; HL is a pointer to the line to parse
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; Prepare to read arguments
	; Set argc to 0
	push		hl
	push		bc
	inc		bc
	inc		bc
	ld		a, 0
	push		af
	; Read command name
	push		bc
	call StrTok
ParseLine00:
	; If string ended in a null, we're done
	cp		"\0"
	jr		z, ParseLine01
	pop		bc
	; DE now points to the start of the first arg
	; Load this into IX and increment
	ld		a, e
	ld		(bc), a
	inc		bc
	ld		a, d
	ld		(bc), a
	inc		bc
	; Increment argc
	pop		af
	inc		a
	push		af
	; Prepare for next StrTok...
	ld		h, d
	ld		l, e
	push		bc
	call		StrTok
	jr		ParseLine00
ParseLine01:
	pop		bc
	pop		af
	pop		bc
	ld		(bc), a
	pop		hl
	ret

; Function which interprets the string pointed to by HL
; as a command and calls the appropriate function
Dispatch:
	ld		a, (bc)
	inc		bc
	ld		e, a
	ld		a, (bc)
	inc		bc
	ld		d, a
	push		bc
	push		hl
	call		StrCmp
	pop		hl
	jr		z, Dispatch01		; We've matched!
	pop		bc
	inc		bc
	inc		bc
	jr		Dispatch
Dispatch01:
	pop		bc
	ld		a, (bc)
	inc		bc
	ld		l, a
	ld		a, (bc)
	ld		h, a
	jp		(hl)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; UTILITY FUNCTIONS
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ValidateValue:
	call		StrLen
	cp		2
	jr		nz, ValidateValueError
	call		IsStrHex
	jr		nz, ValidateValueError
	cp		a	; Set zero flag
	ret
ValidateValueError:
	call		PrintStringA
	ld		hl, ValueErrorStr
	call		PrintStringA
	or		1	; Reset zero flag
	ret
ValueErrorStr:
	defm		" is not a valid value (use 00-FF).\r\n\0"

ValidateAddress:
	call		StrLen
	cp		4
	jr		nz, ValidateAddressError
	call		IsStrHex
	jr		nz, ValidateAddressError
	cp		a	; Set zero flag
	ret
ValidateAddressError:
	call		PrintStringA
	ld		hl, AddressErrorStr
	call		PrintStringA
	or		1	; Reset zero flag
	ret
AddressErrorStr:
	defm		" is not a valid address (use 0000-FFFF.\r\n\0"

ValidateSector:
	call		StrLen
	cp		8
	jr		nz, ValidateSectorError
	call		IsStrHex
	jr		nz, ValidateSectorError
	cp		a	; Set zero flag
	ret
ValidateSectorError:
	call		PrintStringA
	ld		hl, SectorErrorStr
	call		PrintStringA
	or		1	; Reset zero flag
	ret
SectorErrorStr:
	defm		" is not a valid sector (use 8 digit hex).\r\n\0"

ValidateFilename:
	push		hl
	; Must be less than 13 chars
	call		StrLen
	cp		13
	jr		nc, ValidateFilenameTooLong
	; Must have only one period
	pop		hl
	push		hl
	ld		d, 0
ValidateFilenameCountPeriodLoop:
	ld		a, (hl)
	inc		hl
	cp		"."
	jr		z, ValidateFilenameCountPeriod
	cp		"\0"
	jr		z, ValidateFilenameCountPeriodEnd
	jr		ValidateFilenameCountPeriodLoop
ValidateFilenameCountPeriod:
	inc		d
	jr		ValidateFilenameCountPeriodLoop
ValidateFilenameCountPeriodEnd:
	; d now contains period count
	ld		a, d
	cp		2
	jr		nc, ValidateFilenameTooManyPeriods
	cp		0
	jr		z, ValidateFilenameAllGood
	; Extension must be 3 chars or less
	; If we're here we *know* there is a period
	pop		hl
	push		hl
	ld		a, "."
	ld		bc, 12
	cpir
	; Now we've advanced to the first char after the period.
	call		StrLen
	cp		4
	jr		nc, ValidateFilenameExtTooLong
ValidateFilenameAllGood:
	; All good!
	pop		hl	; Get rid of filename pointer
	cp		a	; Set zero flag
	ret
ValidateFilenameTooLong:
	pop		hl	; Get rid of filename pointer
	ld		hl, FilenameTooLongStr
	call		PrintStringA
	or		1	; Reset zero flag
	ret
FilenameTooLongStr:
	defm		"Filename too long (use 8.3)\r\n\0"
ValidateFilenameTooManyPeriods:
	pop		hl	; Get rid of filename pointer
	ld		hl, FilenameTooManyStr
	call		PrintStringA
	or		1	; Reset zero flag
	ret
FilenameTooManyStr:
	defm		"Max. 1 period in filenames.\r\n\0"
ValidateFilenameExtTooLong:
	pop		hl	; Get rid of filename pointer
	ld		hl, FilenameExtTooLongStr
	call		PrintStringA
	or		1	; Reset zero flag
	ret
FilenameExtTooLongStr:
	defm		"Max. 3 chars in file extensions.\r\n\0"
