.STAT:		equ CFBASE + 0x07	; Status (R)

nullhandler:
	reti

diskhandler:
	di
	push	af
	in		a, (.STAT)		; Read disk status
	pop	af
	ei
	reti

tickhandler:
	di			; Disable interrupts
	push	af		; Save AF and HL
	push	bc
	push	hl

tickhandler_uptime:
	;;;; Handle tick counter
	ld	hl, ticks
	ld	b, 64
	call	inc_and_check_wrap
	jr	nz, tickhandler_alarm

	;;;; Handle uptime tracking
	ld	hl, uptime_secs
	ld	b, 60
	call	inc_and_check_wrap
	jr	nz, tickhandler_alarm

	ld	hl, uptime_mins
	ld	b, 60
	call	inc_and_check_wrap
	jr	nz, tickhandler_alarm

	ld	hl, uptime_hours
	ld	b, 24
	call	inc_and_check_wrap
	jr	nz, tickhandler_alarm

	ld	hl, (uptime_days)
	inc	hl
	ld	(uptime_days), hl

tickhandler_alarm:
	ld	a, (alarm_flag)
	cp	0xFF
	jr	nz, tickhandler_end
	ld	a, (alarm_tick)
	ld	b, a
	ld	a, (ticks)
	cp	b
	jr	nz, tickhandler_end
	ld	a, (alarm_countdown)
	dec	a
	ld	(alarm_countdown), a
	cp	0
	jr	nz, tickhandler_end
	ld	a, 0x00
	ld	(alarm_flag), a

tickhandler_end:
	in	a, (109)	; Reset RTC int
	pop	hl		; Restore AF and HL
	pop	bc
	pop	af
	ei			; Enable interrupts
	reti

inc_and_check_wrap:
	; HL - address
	; B  - wrapping value
	ld	a, (hl)
	inc	a
	cp	b
	push	af
	jr	nz, inc_and_check_wrap_store
	ld	a, 0
inc_and_check_wrap_store:
	ld	(hl), a
	pop	af		; Get back flags from the wrap comp
