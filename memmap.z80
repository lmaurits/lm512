ROMBASE:		equ 0x0000
RAMBASE:		equ 0x2000
SYSSTACK:		equ 0x7FFF

; Below we use defs to define variables in RAM, starting at RAMBASE
; This will actually output binary content, so when we're done we
; use "seek 0" to overwrite it with actual code.  Even though our
; empty space is overwritten, the labels remain valid in the
; assembler, so can be used elsewhere.  This is a bit hacky and
; assembler-dependent, but it permits a MUCH nicer layout for this
; file than trying to use only "equ"!

org			RAMBASE

; Stuff for the inbuilt DOS
dos_linebuf:		defs 256
dos_argc:		defs 2
dos_argv:		defs 32

; Stuff for the monitor
mon_linebuf:		defs 256
mon_argc:		defs 2
mon_argv:		defs 2
mon_stack_backup:	defs 22
mon_reg_stack:		defs 2

; Stuff for the FAT driver
fat_sector_buffer:	defs 512	
fat_buffer_index:	defs 2
filename_buffer:	defs 16
; FAT specs table ;;;;;;;;;;;

partition_start_sec:	defs 4
fat_spec_table:		
bytes_per_sector:	defs 2
sectors_per_cluster:	defs 1
reserved_sectors:	defs 2
no_of_fats:		defs 1
no_of_root_dir_ents:	defs 2
small_total_sectors:	defs 2
media_descriptor:	defs 1
sectors_per_fat:	defs 2

; Derived FAT specs ;;;;;;;;;;;
start_of_fat:		defs 2
start_of_root_dir:	defs 2
start_of_data:		defs 2

fat_buffer:		defs 512
fat_sector:		defs 2
fat_cluster:		defs 2
fat_index:		defs 1
fat_mem_index:		defs 2

root_dir_buffer:	defs 512
root_dir_sector:	defs 2
root_dir_index:		defs 1
root_dir_mem_index:	defs 2

; Directory entry ;;;;;;;;;;;;
dir_entry_buffer:
filename:		defs 8
extension:		defs 3
attribs:		defs 1
more_attribs:		defs 1
creation_millis:	defs 1
creation_h_m_s:		defs 2
creation_date:		defs 2
last_access_date:	defs 2
yet_more_attribs:	defs 2
last_write_time:	defs 2
last_write_date:	defs 2
starting_cluster:	defs 2
size_in_bytes:		defs 4


; File loading stuff ;;;;;;;;;;;;;;
current_cluster:	defs 2
memory_pointer:		defs 2
bytes_remaining:	defs 2
total_bytes:		defs 2
new_file_start_clu:	defs 2
; Scratch stuff ;;;;;;;;;;;;;;
target_filename_ptr:	defs 2
need_to_add_dir_end:	defs 1

; Directory walker config
dir_walk_breakout:	defs 1
dir_walk_loop_callback:	defs 2
dir_walk_end_callback:	defs 2
dir_walk_break_callback:defs 2

ENDOFRAM:		defs 0
; Rewind!
seek 0
