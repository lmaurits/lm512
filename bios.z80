; Definitional includes
include 'memmap.z80'
include 'iomap.z80'

org		ROMBASE
di
jp		Main

defs 4, 0x00	; Align BIOS table 4 bytes into ROMBASE

; BIOS call table

SERIAL_READ_A:		jp ReadA		; 0x0008
defb 0x00
SERIAL_WRITE_A:		jp WriteA
defb 0x00
SERIAL_READ_B:		jp ReadB		; 0x0010
defb 0x00
SERIAL_WRITE_B:		jp WriteB
defb 0x00
RTC_READ:		jp GetRTC		; 0x0018
defb 0x00
RTC_WRITE:		jp SetRTC
defb 0x00
CF_READ:		jp CfReadSectors	; 0x0020
defb 0x00
CF_WRITE:		jp CfWriteSectors
defb 0x00
SERIAL_INIT_A:		jp UartInitA		; 0x0028
defb 0x00
SERIAL_INIT_B:		jp UartInitB
defb 0x00
MONITOR:		jp Monitor		; 0x0030
defb 0x00
BANK:			jp SetMemBank
defb 0x00
defm 0x00, 0x00, 0x00				; 0x0038 reserved for int

; Code generating includes

include 'mmu.z80'
include 'uart.z80'
include 'cf.z80'
include 'rtc.z80'

; Main BIOS entry point
Main:
	; Setup memory
	ld		sp, SYSSTACK
	ld		a, 1
	call		SetMemBank
	; Initialise variables
	ld		a, 0
	ld		(ticks), a
	ld		hl, uptime
	ld		b, 8
UptimeZeroLoop:
	ld		(hl), a
	inc		hl
	djnz		UptimeZeroLoop
	; Initialise hardware
;	call		Notify	; Notify(0) turns off both LEDs
	call		UartInit
	call		RTCSetup
	call		InterruptSetup
	call		CfSetup
	; If CfSetup failed, jump to mon
	cp		0xFF
	jp		z, Monitor
	; Start DOS
	jp		Dos

UartInit:
	ld		a, 10100011b
	call		SERIAL_INIT_A
	ld		a, 11100011b
	call		SERIAL_INIT_B
	ret

RTCSetup:
	; Set periodic rate to 500ms
        ld a, 00001010b
	call		SetPeriodicIntRate
	; Turn on periodic interrupt
	call		EnablePeriodicInt
	ret

InterruptSetup:
	; Copy interrupt to RAM
	ld		de, int_vector
	ld		hl, IntVector
	ld		bc, 16
	ldir
	; Point interrupt vector at interrupt table
	ld		de, int_vector
	ld		a, d
	ld		i, a
	; Set interrupt mode 2
	im 2
	; Enable interrupts
	ei
	ret

IntVector:
	dw		diskhandler
	dw		diskhandler
	dw		nullhandler
	dw		nullhandler
	dw		nullhandler
	dw		tickhandler
	dw		nullhandler
	dw		diskhandler

Sleep:
	cp		0
	jr		z, Microsleep
	ld		(sleep_countdown), a
	ld		a, (ticks)
	ld		(sleep_tick), a
SleepLoop:
	ld		a, (sleep_countdown)
	cp		0
	ret		z
	halt
	jr SleepLoop

Microsleep:
	ld		a, b
	cp		0
	ret		z
	ld		(microsleep_countdown), a
MicrosleepLoop:
	ld		a, (microsleep_countdown)
	cp		0
	ret		z
	halt
	jr MicrosleepLoop
;Notify:
;	ld		b, a
;	bit		0, b
;	jr		z, Notify1Off
;	call		Led1On
;	jr		Notify2
;Notify1Off:
;	call		Led1Off
;Notify2:
;	bit		1, b
;	jp		z, Led2Off
;	jp		Led2On
